Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/include -Wall -std=c++1y -O3 -march=skylake-avx512 -qopt-zmm-usage=high -Wunused-variable -qopt-report=5 -qopenmp -Wall -std=c++1y -g -fsanitize=address -fno-omit-frame-pointer -fopenmp -O3 -DNDEBUG -MD -MT CMakeFiles/incomp.dir/src/Q.cpp.o -MF CMakeFiles/incomp.dir/src/Q.cpp.o.d -o CMakeFiles/incomp.dir/src/Q.cpp.o -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: Q::Q(Q *, int, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Q(Q *, int, double, double)) [1/44=2.3%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,41)
  -> (18,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (18,14) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (18,21) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (18,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (18,34) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (18,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (18,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (18,53) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (26,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (26,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> (26,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (28,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (28,30) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> (28,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (32,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (32,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, unsigned int) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (32,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (45,24) operator new[](std::size_t)
  -> EXTERN: (45,24) __cxa_throw_bad_array_new_length()
  -> EXTERN: (49,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (50,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (51,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (52,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (53,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (54,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (63,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (64,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (65,3) posix_memalign(void **, size_t, size_t)
  -> EXTERN: (66,3) posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
   remark #15389: vectorization support: reference this[_2] has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this[_2] has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference this->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference this->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference this->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference this->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15389: vectorization support: reference this->vp[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.745
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1)
   remark #15389: vectorization support: reference this->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference this->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference this->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference this->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference this->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15388: vectorization support: reference this->vp[U3_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.470
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference this->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference this->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference this->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference this->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15389: vectorization support: reference this->vp[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.745
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->Res[U6_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1)
   remark #15388: vectorization support: reference this->Res[U6_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->Res[U6_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference this->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference this->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15389: vectorization support: reference this->pn_old[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1)
   remark #15389: vectorization support: reference this->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference this->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference this->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15388: vectorization support: reference this->pn_old[U9_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.452
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference this->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference this->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15389: vectorization support: reference this->pn_old[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,41):remark #34051: REGISTER ALLOCATION : [_ZN1QC1Eidd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3 k1]
        
    Routine temporaries
        Total         :     502
            Global    :     128
            Local     :     374
        Regenerable   :     152
        Spilled       :       1
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :      30 [2.32e+00 ~ 2.3%]
            Writes    :      15 [4.26e+00 ~ 4.3%]
        Spills        :      48 bytes*
            Reads     :      23 [8.20e-01 ~ 0.8%]
            Writes    :      21 [2.71e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, unsigned int))/usr/include/c++/8/ostream(193,7)

===========================================================================

Begin optimization report for: Q::Q(Q *const, int, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Q(Q *const, int, double, double)) [3/44=6.8%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
  -> INLINE: (9,4) Q::Q(Q *, int, double, double) (isz = 437) (sz = 448)
    -> (18,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <1>]]
    -> (18,14) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> (18,21) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <1>]]
    -> (18,27) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> (18,34) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <1>]]
    -> (18,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> (18,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <1>]]
    -> (18,53) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
       [[ Called routine is noinline  <1>]]
    -> (26,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> EXTERN: (26,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> (26,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
       [[ Called routine is noinline  <1>]]
    -> (28,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> EXTERN: (28,30) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
    -> (28,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
       [[ Called routine is noinline  <1>]]
    -> (32,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
       [[ Called routine is noinline  <1>]]
    -> (32,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, unsigned int) (isz = 1) (sz = 10)
       [[ Called routine is noinline  <1>]]
    -> (32,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
       [[ Called routine is noinline  <1>]]
    -> EXTERN: (45,24) __cxa_throw_bad_array_new_length()
    -> EXTERN: (45,24) operator new[](std::size_t)
    -> EXTERN: (49,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (50,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (51,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (52,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (53,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (54,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (63,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (64,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (65,3) posix_memalign(void **, size_t, size_t)
    -> EXTERN: (66,3) posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
   remark #15389: vectorization support: reference this[_2] has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this[_2] has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference U1_V->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference U1_V->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference U1_V->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference U1_V->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference U1_V->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15389: vectorization support: reference U1_V->vp[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.745
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
   remark #15389: vectorization support: reference U1_V->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference U1_V->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference U1_V->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference U1_V->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference U1_V->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15388: vectorization support: reference U1_V->vp[U3_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.470
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(75,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U1_V->u[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(77,5) ]
   remark #15389: vectorization support: reference U1_V->v[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(78,5) ]
   remark #15389: vectorization support: reference U1_V->un[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(80,5) ]
   remark #15389: vectorization support: reference U1_V->vn[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(81,5) ]
   remark #15389: vectorization support: reference U1_V->up[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(83,5) ]
   remark #15389: vectorization support: reference U1_V->vp[U3_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(84,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.745
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference U4_V->Res[U6_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
   remark #15388: vectorization support: reference U4_V->Res[U6_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(87,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U4_V->Res[U6_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(89,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 9.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference U7_V->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference U7_V->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference U7_V->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15389: vectorization support: reference U7_V->pn_old[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
   remark #15389: vectorization support: reference U7_V->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference U7_V->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference U7_V->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15388: vectorization support: reference U7_V->pn_old[U9_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.452
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(92,1) inlined into /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference U7_V->p[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(94,5) ]
   remark #15389: vectorization support: reference U7_V->pn[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(95,5) ]
   remark #15389: vectorization support: reference U7_V->pp[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(96,5) ]
   remark #15389: vectorization support: reference U7_V->pn_old[U9_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(97,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.697
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.620 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(9,4):remark #34051: REGISTER ALLOCATION : [_ZN1QC2Eidd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3 k1]
        
    Routine temporaries
        Total         :     502
            Global    :     128
            Local     :     374
        Regenerable   :     152
        Spilled       :       1
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :      30 [2.32e+00 ~ 2.3%]
            Writes    :      15 [4.26e+00 ~ 4.3%]
        Spills        :      48 bytes*
            Reads     :      23 [8.20e-01 ~ 0.8%]
            Writes    :      21 [2.71e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::VTK_out(Q *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::VTK_out(Q *, double *, double *, int)) [4/44=9.1%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(119,46)
  -> EXTERN: (126,3) sprintf(char *, const char *, ...)
  -> EXTERN: (127,8) fopen(const char *, const char *)
  -> EXTERN: (133,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (134,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (135,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (136,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (137,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (138,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (142,9) fprintf(FILE *, const char *, ...)
  -> EXTERN: (146,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (148,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (149,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (153,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (153,31) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (156,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (157,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (162,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (162,31) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (165,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (166,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (170,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (170,31) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (173,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(140,5)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(142,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (142:9) and call:fprintf(FILE *, const char *, ...) (142:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (142:9) and call:fprintf(FILE *, const char *, ...) (142:9)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(141,7)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(142,9) ]
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(151,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(153,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (153:7) and call:fprintf(FILE *, const char *, ...) (153:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (153:7) and call:fprintf(FILE *, const char *, ...) (153:7)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(152,5)
      remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(153,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *, const char *, ...) (153:7) and this->u (153:7)
      remark #15346: vector dependence: assumed ANTI dependence between this->u (153:7) and call:fprintf(FILE *, const char *, ...) (153:7)
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(159,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(162,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (162:7) and call:fprintf(FILE *, const char *, ...) (162:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (162:7) and call:fprintf(FILE *, const char *, ...) (162:7)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(160,5)
      remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(162,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *, const char *, ...) (162:7) and this->v[j*this->nmax+i] (162:7)
      remark #15346: vector dependence: assumed ANTI dependence between this->v[j*this->nmax+i] (162:7) and call:fprintf(FILE *, const char *, ...) (162:7)
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(168,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(170,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (170:7) and call:fprintf(FILE *, const char *, ...) (170:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (170:7) and call:fprintf(FILE *, const char *, ...) (170:7)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(169,5)
      remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(170,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *, const char *, ...) (170:7) and this->p[j*this->nmax+i] (170:7)
      remark #15346: vector dependence: assumed ANTI dependence between this->p[j*this->nmax+i] (170:7) and call:fprintf(FILE *, const char *, ...) (170:7)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(119,46):remark #34051: REGISTER ALLOCATION : [_ZN1Q7VTK_outEPdS0_i] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:119

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     147
            Global    :      34
            Local     :     113
        Regenerable   :      63
        Spilled       :      12
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      10 [2.67e+00 ~ 2.7%]
            Writes    :       7 [1.00e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::VTK_out_with_ghost(Q *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::VTK_out_with_ghost(Q *, double *, double *)) [5/44=11.4%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(176,50)
  -> EXTERN: (182,3) sprintf(char *, const char *, ...)
  -> EXTERN: (183,8) fopen(const char *, const char *)
  -> EXTERN: (189,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (190,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (191,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (192,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (193,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (194,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (198,7) fprintf(FILE *, const char *, ...)
  -> EXTERN: (202,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (204,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (205,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (210,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (210,31) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (210,47) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (218,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (219,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (224,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (224,31) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (224,47) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (230,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (231,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (235,7) fprintf(FILE *, const char *, ...)
  -> INLINE (MANUAL): (235,31) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (239,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(196,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(198,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (198:7) and call:fprintf(FILE *, const char *, ...) (198:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *, const char *, ...) (198:7) and call:fprintf(FILE *, const char *, ...) (198:7)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(197,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(198,7) ]
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(207,3)
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(208,5)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(221,3)
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(222,5)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(233,3)
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(234,5)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(176,50):remark #34051: REGISTER ALLOCATION : [_ZN1Q18VTK_out_with_ghostEPdS0_] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:176

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     148
            Global    :      40
            Local     :     108
        Regenerable   :      57
        Spilled       :      10
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [3.92e+00 ~ 3.9%]
            Writes    :       7 [2.35e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::Struct_2D_Ghost(Q *, double, double, double, double, double **, double **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Struct_2D_Ghost(Q *, double, double, double, double, double **, double **)) [6/44=13.6%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(900,1)
  -> (908,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (908,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (908,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (909,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (909,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (909,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (911,28) operator new[](std::size_t)
  -> EXTERN: (911,28) __cxa_throw_bad_array_new_length()
  -> EXTERN: (912,28) operator new[](std::size_t)
  -> EXTERN: (912,28) __cxa_throw_bad_array_new_length()


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(919,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(918,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(924,3)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(923,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(918,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *X[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(920,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.762
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(918,1)
   remark #15388: vectorization support: reference *X[i] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(920,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(918,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *X[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(920,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.762
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(923,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference *Y[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(925,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.762
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(923,1)
   remark #15388: vectorization support: reference *Y[i] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(925,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(923,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference *Y[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(925,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.762
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 7.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(900,1):remark #34051: REGISTER ALLOCATION : [_ZN1Q15Struct_2D_GhostEddddPPdS1_] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:900

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     360
            Global    :      92
            Local     :     268
        Regenerable   :     115
        Spilled       :       6
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :      18 [1.94e+00 ~ 1.9%]
            Writes    :      18 [5.82e+00 ~ 5.8%]
        Spills        :      88 bytes*
            Reads     :      29 [2.02e+00 ~ 2.0%]
            Writes    :      21 [3.69e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::KovFlow(Q *, double, double, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::KovFlow(Q *, double, double, double *, double *, double *)) [7/44=15.9%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(929,73)
  -> EXTERN: (935,14) exp(double)
  -> EXTERN: (935,33) cos(double)
  -> EXTERN: (936,27) exp(double)
  -> EXTERN: (936,44) sin(double)
  -> EXTERN: (937,22) exp(double)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(929,73):remark #34051: REGISTER ALLOCATION : [_ZN1Q7KovFlowEddPdS0_S0_] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:929

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rdx rcx rsi rdi r13-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      36
            Global    :      16
            Local     :      20
        Regenerable   :       1
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [6.12e+00 ~ 6.1%]
            Writes    :       3 [6.12e+00 ~ 6.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::setExactBC(Q *, double, double, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::setExactBC(Q *, double, double, double, double)) [8/44=18.2%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(940,64)
  -> EXTERN: (942,14) operator new[](std::size_t)
  -> INLINE: (947,5) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (950,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (951,7) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE: (953,5) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (956,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (957,7) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE: (962,5) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (965,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (966,7) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE: (968,5) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (971,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (972,7) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE: (978,5) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (981,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (982,7) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE: (984,5) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (987,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (988,7) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE: (993,5) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (996,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (997,7) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE: (999,5) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (1002,5) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (1003,7) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(944,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1018,3) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1020,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->dx (1010:3) and this->v[i*this->nmax+this->nmax-1] (972:5)
   remark #15346: vector dependence: assumed FLOW dependence between this->v[i*this->nmax+this->nmax-1] (972:5) and this->dx (1010:3)
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(975,3)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1018,3) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1020,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->dx (1010:3) and this->v[this->nmax*this->nmax+i] (1003:5)
   remark #15346: vector dependence: assumed FLOW dependence between this->v[this->nmax*this->nmax+i] (1003:5) and this->dx (1010:3)
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(940,64):remark #34051: REGISTER ALLOCATION : [_ZN1Q10setExactBCEdddd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:940

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     163
            Global    :      69
            Local     :      94
        Regenerable   :       9
        Spilled       :      32
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     216 bytes*
            Reads     :      57 [2.74e+01 ~ 27.4%]
            Writes    :      33 [1.03e+01 ~ 10.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::Uxy(Q *, double, double, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Uxy(Q *, double, double, int, int, double *)) [9/44=20.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1007,61)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1007,61):remark #34051: REGISTER ALLOCATION : [_ZN1Q3UxyEddiiPd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1007

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      25
            Global    :       0
            Local     :      25
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::Vxy(Q *, double, double, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Vxy(Q *, double, double, int, int, double *)) [10/44=22.7%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1015,61)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1015,61):remark #34051: REGISTER ALLOCATION : [_ZN1Q3VxyEddiiPd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1015

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      25
            Global    :       0
            Local     :      25
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::Pxy(Q *, double, double, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Pxy(Q *, double, double, int, int, double *)) [11/44=25.0%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1023,61)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1023,61):remark #34051: REGISTER ALLOCATION : [_ZN1Q3PxyEddiiPd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1023

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      25
            Global    :       0
            Local     :      25
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::Grad(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::Grad(Q *)) [12/44=27.3%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1073,16)
  -> INLINE (MANUAL): (1095,10) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1095,28) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1095,49) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1091,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this->pn[j*this->nmax+i] (1095:7) and this->vn[j*this->nmax+i+1] (1095:7)
   remark #15346: vector dependence: assumed ANTI dependence between this->vn[j*this->nmax+i+1] (1095:7) and this->pn[j*this->nmax+i] (1095:7)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1092,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between this->pn[j*this->nmax+i] (1095:7) and this->vn[j*this->nmax+i+1] (1095:7)
      remark #15346: vector dependence: assumed ANTI dependence between this->vn[j*this->nmax+i+1] (1095:7) and this->pn[j*this->nmax+i] (1095:7)
      remark #25439: unrolled with remainder by 4  
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1092,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1073,16):remark #34051: REGISTER ALLOCATION : [_ZN1Q4GradEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1073

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :      63
            Global    :      30
            Local     :      33
        Regenerable   :       2
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      11 [6.39e+00 ~ 6.4%]
            Writes    :      10 [3.24e+00 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::setBoundaryLidDrivenCavity(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::setBoundaryLidDrivenCavity(Q *)) [13/44=29.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1215,38)
  -> INLINE (MANUAL): (1220,8) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1220,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1222,8) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1224,8) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1224,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1225,8) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1225,33) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1237,8) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1242,8) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1245,8) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1217,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1229,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1217,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->un[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,5) ]
   remark #15389: vectorization support: reference this->un[this->nmax+1+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,23) ]
   remark #15389: vectorization support: reference this->un[(this->nmax-1)*(this->nmax+1)+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1222,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.099
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 13.620 
   remark #15478: estimated potential speedup: 1.240 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1217,1)
   remark #15389: vectorization support: reference this->un[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,5) ]
   remark #15389: vectorization support: reference this->un[this->nmax+1+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,23) ]
   remark #15389: vectorization support: reference this->un[(this->nmax-1)*(this->nmax+1)+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1222,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15416: vectorization support: non-unit strided store was generated for the variable <this->vn[i*this->nmax]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1224,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <this->vn[i*this->nmax+1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1224,23) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <this->vn[i*this->nmax+this->nmax-1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1225,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <this->vn[i*this->nmax+this->nmax-2]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1225,30) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.073
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 13.620 
   remark #15478: estimated potential speedup: 1.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1217,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->un[i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,5) ]
   remark #15389: vectorization support: reference this->un[this->nmax+1+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1220,23) ]
   remark #15389: vectorization support: reference this->un[(this->nmax-1)*(this->nmax+1)+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1222,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.099
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 13.620 
   remark #15478: estimated potential speedup: 1.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1229,1)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1229,1)
   remark #15388: vectorization support: reference this->vn[this->nmax+i] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1237,5) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <this->un[i*(this->nmax+1)+1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1242,5) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <this->un[i*(this->nmax+1)+this->nmax-1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1245,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.167
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1229,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->vn[this->nmax+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1237,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.722
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 7.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1215,38):remark #34051: REGISTER ALLOCATION : [_ZN1Q26setBoundaryLidDrivenCavityEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1215

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm13 k1-k7]
        
    Routine temporaries
        Total         :     364
            Global    :     100
            Local     :     264
        Regenerable   :      84
        Spilled       :      27
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       8 [0.00e+00 ~ 0.0%]
            Writes    :      10 [2.86e+00 ~ 2.9%]
        Spills        :     240 bytes*
            Reads     :      43 [3.88e+00 ~ 3.9%]
            Writes    :      44 [3.59e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::showExact(Q *, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::showExact(Q *, double, double)) [14/44=31.8%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1031,41)
  -> EXTERN: (1033,14) operator new[](std::size_t)
  -> INLINE: (1038,7) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (1041,7) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (1042,9) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE: (1049,7) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> INLINE: (1052,7) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (1053,9) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE: (1061,7) Q::Pxy(Q *, double, double, int, int, double *) (isz = 14) (sz = 29)
  -> INLINE: (1064,7) Q::KovFlow(Q *, double, double, double *, double *, double *) (isz = 44) (sz = 59)
    -> EXTERN: (935,14) exp(double)
    -> EXTERN: (935,33) cos(double)
    -> EXTERN: (936,27) exp(double)
    -> EXTERN: (936,44) sin(double)
    -> EXTERN: (937,22) exp(double)
  -> INLINE (MANUAL): (1065,9) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (1070,3) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1035,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->dx (1010:3) and this->u[j*(this->nmax+1)+i] (1042:7)
   remark #15346: vector dependence: assumed FLOW dependence between this->u[j*(this->nmax+1)+i] (1042:7) and this->dx (1010:3)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1036,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1010,3) ]
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1012,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this->dx (1010:3) and this->u[j*(this->nmax+1)+i] (1042:7)
      remark #15346: vector dependence: assumed FLOW dependence between this->u[j*(this->nmax+1)+i] (1042:7) and this->dx (1010:3)
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1046,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->dx (1018:3) and this->v[j*this->nmax+i] (1053:7)
   remark #15346: vector dependence: assumed FLOW dependence between this->v[j*this->nmax+i] (1053:7) and this->dx (1018:3)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1047,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1018,3) ]
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1020,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this->dx (1018:3) and this->v[j*this->nmax+i] (1053:7)
      remark #15346: vector dependence: assumed FLOW dependence between this->v[j*this->nmax+i] (1053:7) and this->dx (1018:3)
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1058,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->dx (1026:3) and this->p[j*this->nmax+i] (1065:7)
   remark #15346: vector dependence: assumed FLOW dependence between this->p[j*this->nmax+i] (1065:7) and this->dx (1026:3)

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1059,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1026,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this->dx (1026:3) and this->p[j*this->nmax+i] (1065:7)
      remark #15346: vector dependence: assumed FLOW dependence between this->p[j*this->nmax+i] (1065:7) and this->dx (1026:3)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1031,41):remark #34051: REGISTER ALLOCATION : [_ZN1Q9showExactEdd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1031

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      94
            Global    :      57
            Local     :      37
        Regenerable   :      10
        Spilled       :      31
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     208 bytes*
            Reads     :      37 [1.96e+01 ~ 19.6%]
            Writes    :      28 [1.20e+01 ~ 12.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::uIdx(Q *, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q::uIdx(Q *, int, int)) /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(245,34)

===========================================================================

Begin optimization report for: Q::vIdx(Q *, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q::vIdx(Q *, int, int)) /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(248,34)

===========================================================================

Begin optimization report for: Q::pIdx(Q *, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q::pIdx(Q *, int, int)) /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(251,34)

===========================================================================

Begin optimization report for: Q::getRes(Q *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::getRes(Q *, double)) [18/44=40.9%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(258,27)
  -> INLINE (MANUAL): (269,11) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (270,18) pow(double, double)
  -> INLINE (MANUAL): (270,25) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (270,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (271,18) pow(double, double)
  -> INLINE (MANUAL): (271,24) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (271,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (274,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (274,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (275,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (275,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (276,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (276,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (277,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (277,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (280,21) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (280,41) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (281,21) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (281,37) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (283,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (283,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (284,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (284,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (285,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (285,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (286,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (286,36) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (297,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (297,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (298,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (298,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (299,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (299,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (300,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (300,42) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (301,30) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (301,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (302,27) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (302,43) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (303,30) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (303,54) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (304,27) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (304,47) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (316,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (317,18) pow(double, double)
  -> INLINE (MANUAL): (317,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (317,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (318,18) pow(double, double)
  -> INLINE (MANUAL): (318,24) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (318,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (321,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (321,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (322,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (322,49) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (323,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (323,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (324,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (324,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (326,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (326,39) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (327,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (327,35) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (329,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (329,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (330,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (330,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (331,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (331,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (332,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (332,36) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (341,29) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (341,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (342,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (342,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (343,29) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (343,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (344,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (344,42) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (345,30) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (345,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (346,27) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (346,43) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (347,30) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (347,54) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (348,27) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (348,47) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(263,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(266,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(268,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,23) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,22) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(269,7) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,43) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,35) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,38) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,38) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,41) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,52) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,45) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(268,3)
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,23) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,22) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(269,7) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,43) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,35) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,38) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,38) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,41) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,52) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,45) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(268,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,23) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,22) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(271,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(269,7) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(275,43) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,23) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(277,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(280,39) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,19) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(281,35) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(283,38) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(284,38) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,18) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(285,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,18) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(286,34) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(301,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V-1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(302,41) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,28) ]
      remark #15389: vectorization support: reference this->v[(1+U1b_V+1)*this->nmax+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(303,52) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V+1)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,25) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(304,45) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(297,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(298,44) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,27) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(299,43) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,24) ]
      remark #15389: vectorization support: reference this->u[(1+U1b_V)*(this->nmax+1)+1+U1e_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(300,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(312,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(314,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,22) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(316,7) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,43) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,47) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,39) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,37) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,33) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,38) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,38) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,40) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,41) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,52) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(314,3)
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,22) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(316,7) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,43) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,47) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,39) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,37) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,33) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,38) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,38) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,40) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,41) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,52) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(314,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,22) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(318,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(316,7) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(321,43) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,47) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,23) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(323,39) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,27) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(324,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(326,37) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,17) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(327,33) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(329,38) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(330,38) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,18) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(331,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,18) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(332,34) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(341,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V+1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(342,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,27) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(343,43) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,24) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V-1)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(344,40) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(345,44) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(346,41) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V-1)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,28) ]
      remark #15389: vectorization support: reference this->u[(1+U21_V)*(this->nmax+1)+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(347,52) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,25) ]
      remark #15389: vectorization support: reference this->v[(1+U21_V)*this->nmax+1+U24_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(348,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(270,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(274,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(276,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,43):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(317,43):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,27):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,27):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,47):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(322,47):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(258,27):remark #34051: REGISTER ALLOCATION : [_ZN1Q6getResEd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:258

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   51[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k4]
        
    Routine temporaries
        Total         :     818
            Global    :     104
            Local     :     714
        Regenerable   :      85
        Spilled       :      41
        
    Routine stack
        Variables     :      92 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :      13 [6.21e-01 ~ 0.6%]
        Spills        :     368 bytes*
            Reads     :      65 [1.54e+00 ~ 1.5%]
            Writes    :      60 [1.47e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::getResTotal(Q *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::getResTotal(Q *, double)) [19/44=43.2%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(361,32)
  -> INLINE (MANUAL): (372,11) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (373,18) pow(double, double)
  -> INLINE (MANUAL): (373,25) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (373,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (374,18) pow(double, double)
  -> INLINE (MANUAL): (374,24) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (374,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (377,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (377,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (378,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (378,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (379,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (379,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (380,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (380,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (382,19) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (382,39) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (383,19) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (383,35) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (385,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (385,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (386,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (386,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (387,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (387,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (388,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (388,36) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (390,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (390,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (391,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (391,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (392,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (392,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (393,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (393,42) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (394,30) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (394,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (395,27) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (395,43) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (396,30) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (396,54) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (397,27) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (397,47) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (410,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (411,18) pow(double, double)
  -> INLINE (MANUAL): (411,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (411,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (412,18) pow(double, double)
  -> INLINE (MANUAL): (412,24) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (412,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (415,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (415,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (416,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (416,49) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (417,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (417,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (418,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (418,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (420,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (420,39) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (421,19) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (421,35) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (423,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (423,40) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (424,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (424,40) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (425,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (425,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (426,20) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (426,36) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (428,29) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (428,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (429,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (429,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (430,29) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (430,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (431,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (431,42) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (432,30) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (432,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (433,27) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (433,43) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (434,30) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (434,54) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (435,27) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (435,47) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(366,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(369,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(371,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,23) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,22) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(372,7) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,43) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,39) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,37) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,33) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,38) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,38) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,41) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,52) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,45) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(371,3)
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,23) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,22) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(372,7) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,43) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,39) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,37) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,33) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,38) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,38) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,41) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,52) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,45) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(371,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,23) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,22) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(374,38) ]
      remark #15389: vectorization support: reference this->Res[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(372,7) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(378,43) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,23) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,39) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(380,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(382,37) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,17) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(383,33) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(385,38) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(386,38) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,18) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(387,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,18) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(388,34) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(394,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V-1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(395,41) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,28) ]
      remark #15389: vectorization support: reference this->v[(1+U27_V+1)*this->nmax+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(396,52) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V+1)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,25) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(397,45) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(390,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(391,44) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,27) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(392,43) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,24) ]
      remark #15389: vectorization support: reference this->u[(1+U27_V)*(this->nmax+1)+1+U2a_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(393,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(407,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(409,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,22) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(410,7) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,43) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,47) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,39) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,37) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,33) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,38) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,38) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,40) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,41) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,52) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(409,3)
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,22) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(410,7) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,43) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,47) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,39) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,37) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,33) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,38) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,38) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,40) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,41) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,52) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(409,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,22) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(412,38) ]
      remark #15389: vectorization support: reference this->Res[this->sizeS+(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(410,7) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(415,43) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,47) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,23) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(417,39) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,27) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(418,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(420,37) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,17) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(421,33) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(423,38) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(424,38) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,18) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(425,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,18) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(426,34) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(428,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V+1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(429,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,27) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(430,43) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,24) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V-1)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(431,40) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(432,44) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(433,41) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V-1)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,28) ]
      remark #15389: vectorization support: reference this->u[(1+U2d_V)*(this->nmax+1)+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(434,52) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,25) ]
      remark #15389: vectorization support: reference this->v[(1+U2d_V)*this->nmax+1+U30_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(435,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 73.000 
      remark #15478: estimated potential speedup: 7.300 
      remark #15486: divides: 14 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(373,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(377,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,23):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(379,23):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,43):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(411,43):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,27):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,27):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,47):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(416,47):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(361,32):remark #34051: REGISTER ALLOCATION : [_ZN1Q11getResTotalEd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:361

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   51[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k4]
        
    Routine temporaries
        Total         :     818
            Global    :     104
            Local     :     714
        Regenerable   :      85
        Spilled       :      41
        
    Routine stack
        Variables     :      92 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :      13 [6.21e-01 ~ 0.6%]
        Spills        :     368 bytes*
            Reads     :      65 [1.54e+00 ~ 1.5%]
            Writes    :      60 [1.47e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::predict(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::predict(Q *)) [20/44=45.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(568,19)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(570,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(570,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->un[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,5) ]
   remark #15389: vectorization support: reference this->Res[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,14) ]
   remark #15389: vectorization support: reference this->u[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,28) ]
   remark #15389: vectorization support: reference this->vn[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,5) ]
   remark #15389: vectorization support: reference this->Res[this->sizeS+U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,14) ]
   remark #15389: vectorization support: reference this->v[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.242
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.490 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(570,1)
   remark #15389: vectorization support: reference this->un[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,5) ]
   remark #15389: vectorization support: reference this->Res[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,14) ]
   remark #15389: vectorization support: reference this->u[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,28) ]
   remark #15388: vectorization support: reference this->vn[U33_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,5) ]
   remark #15389: vectorization support: reference this->Res[this->sizeS+U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,14) ]
   remark #15389: vectorization support: reference this->v[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.482
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.490 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(570,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->un[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,5) ]
   remark #15389: vectorization support: reference this->Res[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,14) ]
   remark #15389: vectorization support: reference this->u[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(572,28) ]
   remark #15389: vectorization support: reference this->vn[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,5) ]
   remark #15389: vectorization support: reference this->Res[this->sizeS+U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,14) ]
   remark #15389: vectorization support: reference this->v[U33_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(573,36) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.242
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.490 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(568,19):remark #34051: REGISTER ALLOCATION : [_ZN1Q7predictEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:568

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     151
            Global    :      35
            Local     :     116
        Regenerable   :      39
        Spilled       :       5
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [4.09e+00 ~ 4.1%]
        Spills        :      80 bytes*
            Reads     :      16 [2.62e+00 ~ 2.6%]
            Writes    :      16 [4.33e+00 ~ 4.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::project(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::project(Q *)) [21/44=47.7%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(494,19)
  -> INLINE (MANUAL): (516,23) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (516,44) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (517,23) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (517,44) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (519,25) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (519,50) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (520,25) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (520,50) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (521,14) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(511,3)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1) ]
   remark #15382: vectorization support: call to function .31 cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(512,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(513,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(515,5)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,43) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,20) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,41) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,20) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,41) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V-1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,43) ]
      remark #15389: vectorization support: reference this->pn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(521,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.140
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 241 
      remark #15477: vector cost: 37.370 
      remark #15478: estimated potential speedup: 6.020 
      remark #15486: divides: 8 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(515,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,11) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,43) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,20) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,41) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,20) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,41) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V-1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,43) ]
      remark #15389: vectorization support: reference this->pn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(521,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.161
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 241 
      remark #15477: vector cost: 37.370 
      remark #15478: estimated potential speedup: 6.020 
      remark #15486: divides: 8 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(515,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V)*this->nmax+1+U39_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,43) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V+1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,20) ]
      remark #15389: vectorization support: reference this->un[(1+U36_V)*(this->nmax+1)+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,41) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,20) ]
      remark #15389: vectorization support: reference this->vn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(517,41) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V+1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,18) ]
      remark #15389: vectorization support: reference this->pn_old[(1+U36_V-1)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(520,43) ]
      remark #15389: vectorization support: reference this->pn[(1+U36_V)*this->nmax+1+U39_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(521,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.140
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 241 
      remark #15477: vector cost: 37.370 
      remark #15478: estimated potential speedup: 6.020 
      remark #15486: divides: 8 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,18):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(519,18):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,20):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(516,20):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(494,19):remark #34051: REGISTER ALLOCATION : [_ZN1Q7projectEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:494

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   54[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k0-k7]
        
    Routine temporaries
        Total         :     364
            Global    :      65
            Local     :     299
        Regenerable   :      48
        Spilled       :      27
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       6 [7.28e-02 ~ 0.1%]
            Writes    :       7 [6.82e-01 ~ 0.7%]
        Spills        :     256 bytes*
            Reads     :      43 [2.42e+00 ~ 2.4%]
            Writes    :      42 [2.47e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::correct(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::correct(Q *)) [22/44=50.0%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(577,19)
  -> INLINE (MANUAL): (585,10) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (586,21) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (586,38) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (586,65) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (593,10) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (594,21) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (594,38) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (594,65) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(579,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(582,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(584,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(585,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,35) ]
      remark #15389: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.257
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(584,3)
      remark #15388: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(585,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,35) ]
      remark #15388: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.222
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(584,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(585,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U3c_V)*this->nmax+1+U3f_V-1] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,35) ]
      remark #15389: vectorization support: reference this->un[(1+U3c_V)*(this->nmax+1)+1+U3f_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.415
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(590,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(592,3)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(593,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V-1)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,35) ]
      remark #15389: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.257
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(592,3)
      remark #15388: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(593,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V-1)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,35) ]
      remark #15388: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.222
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(592,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(593,7) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,18) ]
      remark #15389: vectorization support: reference this->pn[(1+U42_V-1)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,35) ]
      remark #15389: vectorization support: reference this->vn[(1+U42_V)*this->nmax+1+U45_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(594,62) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.415
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 5.620 
      remark #15478: estimated potential speedup: 6.590 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(586,18):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(577,19):remark #34051: REGISTER ALLOCATION : [_ZN1Q7correctEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:577

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   38[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm19 k0-k3]
        
    Routine temporaries
        Total         :     376
            Global    :      81
            Local     :     295
        Regenerable   :      72
        Spilled       :      12
        
    Routine stack
        Variables     :      68 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :      10 [1.40e+00 ~ 1.4%]
        Spills        :     128 bytes*
            Reads     :      33 [1.92e+00 ~ 1.9%]
            Writes    :      23 [1.14e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::update(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::update(Q *)) [23/44=52.3%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(463,18)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(465,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(473,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(465,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->up[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,5) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,13) ]
   remark #15389: vectorization support: reference this->vp[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,5) ]
   remark #15389: vectorization support: reference this->v[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,13) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,5) ]
   remark #15389: vectorization support: reference this->un[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,12) ]
   remark #15389: vectorization support: reference this->v[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,5) ]
   remark #15389: vectorization support: reference this->vn[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.280
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.370 
   remark #15478: estimated potential speedup: 3.780 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(465,1)
   remark #15389: vectorization support: reference this->up[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,5) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,13) ]
   remark #15389: vectorization support: reference this->vp[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,5) ]
   remark #15388: vectorization support: reference this->v[U48_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,13) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,5) ]
   remark #15389: vectorization support: reference this->un[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,12) ]
   remark #15388: vectorization support: reference this->v[U48_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,5) ]
   remark #15389: vectorization support: reference this->vn[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.800
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.370 
   remark #15478: estimated potential speedup: 3.780 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(465,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->up[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,5) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(467,13) ]
   remark #15389: vectorization support: reference this->vp[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,5) ]
   remark #15389: vectorization support: reference this->v[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(468,13) ]
   remark #15389: vectorization support: reference this->u[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,5) ]
   remark #15389: vectorization support: reference this->un[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(469,12) ]
   remark #15389: vectorization support: reference this->v[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,5) ]
   remark #15389: vectorization support: reference this->vn[U48_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(470,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.280
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.370 
   remark #15478: estimated potential speedup: 3.780 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(473,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->pp[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,5) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,13) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,5) ]
   remark #15389: vectorization support: reference this->pn[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.219
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.370 
   remark #15478: estimated potential speedup: 5.920 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(473,1)
   remark #15389: vectorization support: reference this->pp[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,5) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,13) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,5) ]
   remark #15389: vectorization support: reference this->pn[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.455
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.370 
   remark #15478: estimated potential speedup: 5.920 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(473,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->pp[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,5) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(475,13) ]
   remark #15389: vectorization support: reference this->p[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,5) ]
   remark #15389: vectorization support: reference this->pn[U4b_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(476,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.219
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.370 
   remark #15478: estimated potential speedup: 5.920 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(463,18):remark #34051: REGISTER ALLOCATION : [_ZN1Q6updateEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:463

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     226
            Global    :      53
            Local     :     173
        Regenerable   :      73
        Spilled       :       0
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       8 [0.00e+00 ~ 0.0%]
            Writes    :      10 [5.30e+00 ~ 5.3%]
        Spills        :      40 bytes*
            Reads     :      15 [1.20e+00 ~ 1.2%]
            Writes    :      15 [3.61e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::start(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::start(Q *)) [24/44=54.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(444,17)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(448,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(456,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(448,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->un[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,13) ]
   remark #15389: vectorization support: reference this->up[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,13) ]
   remark #15389: vectorization support: reference this->vp[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,5) ]
   remark #15389: vectorization support: reference this->v[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,13) ]
   remark #15389: vectorization support: reference this->vn[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,5) ]
   remark #15389: vectorization support: reference this->v[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 3.890 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(448,1)
   remark #15389: vectorization support: reference this->un[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,13) ]
   remark #15389: vectorization support: reference this->up[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,13) ]
   remark #15389: vectorization support: reference this->vp[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,5) ]
   remark #15388: vectorization support: reference this->v[U4e_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,13) ]
   remark #15389: vectorization support: reference this->vn[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,5) ]
   remark #15388: vectorization support: reference this->v[U4e_V] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.735
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 3.890 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(448,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->un[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(450,13) ]
   remark #15389: vectorization support: reference this->up[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,5) ]
   remark #15389: vectorization support: reference this->u[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(451,13) ]
   remark #15389: vectorization support: reference this->vp[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,5) ]
   remark #15389: vectorization support: reference this->v[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(453,13) ]
   remark #15389: vectorization support: reference this->vn[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,5) ]
   remark #15389: vectorization support: reference this->v[U4e_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(454,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 3.890 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(456,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->pn[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,13) ]
   remark #15389: vectorization support: reference this->pp[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.354
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 5.440 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(456,1)
   remark #15389: vectorization support: reference this->pn[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,13) ]
   remark #15389: vectorization support: reference this->pp[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 5.440 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(456,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->pn[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(458,13) ]
   remark #15389: vectorization support: reference this->pp[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,5) ]
   remark #15389: vectorization support: reference this->p[U51_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(459,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.354
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 5.440 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(444,17):remark #34051: REGISTER ALLOCATION : [_ZN1Q5startEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:444

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     223
            Global    :      53
            Local     :     170
        Regenerable   :      73
        Spilled       :       0
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       8 [0.00e+00 ~ 0.0%]
            Writes    :      10 [5.44e+00 ~ 5.4%]
        Spills        :      40 bytes*
            Reads     :      15 [1.24e+00 ~ 1.2%]
            Writes    :      15 [3.71e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::debug(Q *, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::debug(Q *, double, double)) [25/44=56.8%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1102,37)
  -> INLINE: (1109,3) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1110,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1110,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1110,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1110,43) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1110,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1110,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1110,70) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> (1111,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1112,3) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1113,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1113,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1113,38) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1113,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1113,54) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1114,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1114,13) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> (1114,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1115,3) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1116,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1116,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1116,38) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1116,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1116,54) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1117,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1117,13) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> (1117,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1118,3) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1119,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1119,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1119,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1119,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1119,56) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1120,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1120,13) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> (1120,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1121,3) Q::Uxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1122,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1122,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1122,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1122,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1122,56) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1123,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1123,13) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> (1123,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (1125,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1125,72) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1126,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1127,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1127,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1127,36) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1127,43) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1127,52) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1127,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1127,70) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1128,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1129,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1130,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1130,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1130,38) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1130,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1130,54) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1131,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1131,13) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1131,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1132,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1133,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1133,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1133,38) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1133,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1133,54) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1134,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1134,13) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1134,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1135,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1136,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1136,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1136,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1136,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1136,56) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1137,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1137,13) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1137,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1138,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1139,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1139,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1139,40) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1139,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1139,56) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1140,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (1140,13) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1140,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1142,3) Q::Vxy(Q *, double, double, int, int, double *) (isz = 13) (sz = 28)
  -> (1144,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1144,22) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1144,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1144,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1144,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (1146,3) Q::Pxy(Q *, double, double, int, int, double *) (isz = 14) (sz = 29)
  -> (1150,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1150,22) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1150,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1150,38) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1150,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (1156,12) pow(double, double)
  -> INLINE (MANUAL): (1156,19) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1156,39) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (1157,12) pow(double, double)
  -> INLINE (MANUAL): (1157,18) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1157,34) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1160,16) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1160,36) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1161,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1161,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1162,16) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1162,32) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1163,20) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1163,36) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1165,25) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1165,41) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1167,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1167,21) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1167,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (1169,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1169,21) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1169,31) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (1171,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1171,20) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1171,29) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (1173,19) pow(double, double)
  -> INLINE (MANUAL): (1173,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1173,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> EXTERN: (1174,19) pow(double, double)
  -> INLINE (MANUAL): (1174,25) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1174,41) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1177,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1177,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1178,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1178,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1179,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1179,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1180,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1180,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1181,30) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1181,46) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1183,25) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1183,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1184,25) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1184,41) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1186,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1186,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1187,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1187,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1188,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1188,42) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1189,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1189,42) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (1191,19) pow(double, double)
  -> INLINE (MANUAL): (1191,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1191,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> EXTERN: (1192,19) pow(double, double)
  -> INLINE (MANUAL): (1192,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1192,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1195,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1195,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1196,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1196,49) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1197,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1197,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1198,29) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1198,45) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1199,30) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1199,46) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1201,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1201,45) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1202,25) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1202,41) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1204,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1204,46) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1205,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1205,46) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1206,26) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1206,42) Q::uIdx(Q *, int, int) (isz = 1) (sz = 11)
  -> INLINE (MANUAL): (1207,26) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1207,42) Q::vIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> (1209,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1209,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1209,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> (1210,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (1210,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (1210,27) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1102,37):remark #34051: REGISTER ALLOCATION : [_ZN1Q5debugEdd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1102

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   41[ rax rdx rcx rsi rdi r8-r10 r13 zmm0-zmm31]
        
    Routine temporaries
        Total         :     635
            Global    :     210
            Local     :     425
        Regenerable   :     109
        Spilled       :      32
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     248 bytes*
            Reads     :      55 [9.20e+00 ~ 9.2%]
            Writes    :      33 [5.52e+00 ~ 5.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *))/usr/include/c++/8/ostream(560,5)

===========================================================================

Begin optimization report for: std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate))/usr/include/c++/8/bits/basic_ios.h(158,7)

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [28/44=63.6%] /usr/include/c++/8/bits/char_traits.h(324,7)
  -> EXTERN: (329,9) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/8/bits/char_traits.h(324,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/8/bits/char_traits.h:324

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double))/usr/include/c++/8/ostream(221,7)

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)))/usr/include/c++/8/ostream(109,7)

===========================================================================

Begin optimization report for: Q::getResNorm(Q *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::getResNorm(Q *, double *)) [31/44=70.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(480,35)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(484,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(484,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,15) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,23) ]
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,33) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,41) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,15) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,23) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,33) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.593
   remark #15355: vectorization support: at (486:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,5) ]
   remark #15355: vectorization support: at (487:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,5) ]
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 6.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(484,1)
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,15) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,23) ]
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,33) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,41) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,15) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,23) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,33) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.464
   remark #15355: vectorization support: at (486:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,5) ]
   remark #15355: vectorization support: at (487:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,5) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 6.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(484,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,15) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,23) ]
   remark #15389: vectorization support: reference this->un[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,33) ]
   remark #15389: vectorization support: reference this->up[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,41) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,15) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,23) ]
   remark #15389: vectorization support: reference this->vn[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,33) ]
   remark #15389: vectorization support: reference this->vp[U54_V] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.593
   remark #15355: vectorization support: at (486:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(486,5) ]
   remark #15355: vectorization support: at (487:5) is double type reduction   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(487,5) ]
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 6.560 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(480,35):remark #34051: REGISTER ALLOCATION : [_ZN1Q10getResNormEPd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:480

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm14 k1]
        
    Routine temporaries
        Total         :     231
            Global    :      40
            Local     :     191
        Regenerable   :      70
        Spilled       :       0
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :      11 [1.05e+00 ~ 1.1%]
            Writes    :      12 [5.40e+00 ~ 5.4%]
        Spills        :      40 bytes*
            Reads     :      15 [1.75e+00 ~ 1.8%]
            Writes    :      15 [3.51e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::setNeumanPressure(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::setNeumanPressure(Q *)) [32/44=72.7%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(602,29)
  -> INLINE (MANUAL): (607,8) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (607,32) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (608,8) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (608,25) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(605,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(605,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this->pn[(this->nmax-1)*this->nmax+i] (607:5) and this->pn[i] (608:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between this->pn[i] (608:5) and this->pn[(this->nmax-1)*this->nmax+i] (607:5)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(605,1)
<Remainder>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(602,29):remark #34051: REGISTER ALLOCATION : [_ZN1Q17setNeumanPressureEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:602

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     128
            Global    :      26
            Local     :     102
        Regenerable   :      39
        Spilled       :       1
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [7.99e+00 ~ 8.0%]
        Spills        :      48 bytes*
            Reads     :      11 [3.63e+00 ~ 3.6%]
            Writes    :      11 [6.96e+00 ~ 7.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::setNeumanPressureLDC(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::setNeumanPressureLDC(Q *)) [33/44=75.0%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1249,32)
  -> INLINE (MANUAL): (1255,10) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1255,27) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1256,10) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1256,27) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1257,10) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)
  -> INLINE (MANUAL): (1257,34) Q::pIdx(Q *, int, int) (isz = 0) (sz = 10)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1253,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1253,1)
<Peeled loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1253,1)
   remark #15388: vectorization support: reference this->pn[i] has aligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1255,7) ]
   remark #15389: vectorization support: reference this->pn[this->nmax+i] has unaligned access   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1255,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <this->pn[i*this->nmax]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1256,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <this->pn[i*this->nmax+1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1256,24) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <this->pn[i*this->nmax+this->nmax-1]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1257,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <this->pn[i*this->nmax+this->nmax-2]>, stride is unknown to compiler   [ /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1257,31) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.135
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 12.000 
   remark #15478: estimated potential speedup: 1.130 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1253,1)
<Remainder loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(1249,32):remark #34051: REGISTER ALLOCATION : [_ZN1Q20setNeumanPressureLDCEv] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:1249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     231
            Global    :      43
            Local     :     188
        Regenerable   :      39
        Spilled       :      13
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.23e+00 ~ 2.2%]
        Spills        :     128 bytes*
            Reads     :      25 [3.71e+00 ~ 3.7%]
            Writes    :      24 [3.03e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::~Q(Q *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::~Q(Q *)) [34/44=77.3%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(101,9)
  -> EXTERN: (102,3) free(void *)
  -> EXTERN: (103,3) free(void *)
  -> EXTERN: (105,3) free(void *)
  -> EXTERN: (106,3) free(void *)
  -> EXTERN: (108,3) free(void *)
  -> EXTERN: (109,3) free(void *)
  -> EXTERN: (111,2) free(void *)
  -> EXTERN: (112,2) free(void *)
  -> EXTERN: (113,2) free(void *)
  -> EXTERN: (114,2) free(void *)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(101,9):remark #34051: REGISTER ALLOCATION : [_ZN1QD1Ev] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r14]
        
    Routine temporaries
        Total         :      28
            Global    :       7
            Local     :      21
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::~Q(Q *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::~Q(Q *const)) [35/44=79.5%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(101,4)
  -> INLINE: (101,4) Q::~Q(Q *) (isz = 30) (sz = 35)
    -> EXTERN: (102,3) free(void *)
    -> EXTERN: (103,3) free(void *)
    -> EXTERN: (105,3) free(void *)
    -> EXTERN: (106,3) free(void *)
    -> EXTERN: (108,3) free(void *)
    -> EXTERN: (109,3) free(void *)
    -> EXTERN: (111,2) free(void *)
    -> EXTERN: (112,2) free(void *)
    -> EXTERN: (113,2) free(void *)
    -> EXTERN: (114,2) free(void *)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(101,4):remark #34051: REGISTER ALLOCATION : [_ZN1QD2Ev] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r14]
        
    Routine temporaries
        Total         :      28
            Global    :       7
            Local     :      21
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ctype<char>::widen(const std::ctype<char> *, char) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ctype<char>::widen(const std::ctype<char> *, char) const) /usr/include/c++/8/bits/locale_facets.h(873,7)

===========================================================================

Begin optimization report for: std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const)/usr/include/c++/8/bits/basic_ios.h(138,7)

===========================================================================

Begin optimization report for: std::basic_ios<char, std::char_traits<char>>::widen(const std::basic_ios<char, std::char_traits<char>> *, char) const

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ios<char, std::char_traits<char>>::widen(const std::basic_ios<char, std::char_traits<char>> *, char) const)/usr/include/c++/8/bits/basic_ios.h(450,7)

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/8/bits/ios_base.h(170,3)

===========================================================================

Begin optimization report for: std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &))/usr/include/c++/8/ostream(594,5)

===========================================================================

Begin optimization report for: std::flush<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::flush<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &))/usr/include/c++/8/ostream(616,5)

===========================================================================

Begin optimization report for: std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)) /usr/include/c++/8/bits/basic_ios.h(48,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [43/44=97.7%] <compiler generated>
  -> EXTERN: /usr/include/c++/8/iostream:(74,25) __cxa_atexit(void (*)(void *), void *, void *)
  -> EXTERN: /usr/include/c++/8/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Q::initialize(Q *, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Q::initialize(Q *, int, double *)) [44/44=100.0%] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(117,40)


    Report from: Code generation optimizations [cg]

/mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp(117,40):remark #34051: REGISTER ALLOCATION : [_ZN1Q10initializeEiPd] /mnt/share/users/kasra/projects/LidDrivenCavity/final/intel/src/Q.cpp:117

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

